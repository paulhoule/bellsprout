# Auto-generated by asn1ate v.0.6.0 from general_20180209.asn

# (last modified on 2018-06-17 20:18:14.634363)


from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class Date_std(univ.Sequence):
    pass


Date_std.componentType = namedtype.NamedTypes(
    namedtype.NamedType('year', univ.Integer()),
    namedtype.OptionalNamedType('month', univ.Integer()),
    namedtype.OptionalNamedType('day', univ.Integer()),
    namedtype.OptionalNamedType('season', char.VisibleString()),
    namedtype.OptionalNamedType('hour', univ.Integer()),
    namedtype.OptionalNamedType('minute', univ.Integer()),
    namedtype.OptionalNamedType('second', univ.Integer())
)


class Date(univ.Choice):
    pass


Date.componentType = namedtype.NamedTypes(
    namedtype.NamedType('str', char.VisibleString()),
    namedtype.NamedType('std', Date_std())
)


class Object_id(univ.Choice):
    pass


Object_id.componentType = namedtype.NamedTypes(
    namedtype.NamedType('id', univ.Integer()),
    namedtype.NamedType('str', char.VisibleString())
)


class Dbtag(univ.Sequence):
    pass


Dbtag.componentType = namedtype.NamedTypes(
    namedtype.NamedType('db', char.VisibleString()),
    namedtype.NamedType('tag', Object_id())
)


class Int_fuzz(univ.Choice):
    pass


Int_fuzz.componentType = namedtype.NamedTypes(
    namedtype.NamedType('p-m', univ.Integer()),
    namedtype.NamedType('range', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('max', univ.Integer()),
        namedtype.NamedType('min', univ.Integer())
    ))
    ),
    namedtype.NamedType('pct', univ.Integer()),
    namedtype.NamedType('lim', univ.Enumerated(namedValues=namedval.NamedValues(('unk', 0), ('gt', 1), ('lt', 2), ('tr', 3), ('tl', 4), ('circle', 5), ('other', 255)))),
    namedtype.NamedType('alt', univ.SetOf(componentType=univ.Integer()))
)


class Name_std(univ.Sequence):
    pass


Name_std.componentType = namedtype.NamedTypes(
    namedtype.NamedType('last', char.VisibleString()),
    namedtype.OptionalNamedType('first', char.VisibleString()),
    namedtype.OptionalNamedType('middle', char.VisibleString()),
    namedtype.OptionalNamedType('full', char.VisibleString()),
    namedtype.OptionalNamedType('initials', char.VisibleString()),
    namedtype.OptionalNamedType('suffix', char.VisibleString()),
    namedtype.OptionalNamedType('title', char.VisibleString())
)


class Person_id(univ.Choice):
    pass


Person_id.componentType = namedtype.NamedTypes(
    namedtype.NamedType('dbtag', Dbtag()),
    namedtype.NamedType('name', Name_std()),
    namedtype.NamedType('ml', char.VisibleString()),
    namedtype.NamedType('str', char.VisibleString()),
    namedtype.NamedType('consortium', char.VisibleString())
)


class User_object(univ.Sequence):
    pass


class User_field(univ.Sequence):
    pass


User_object.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('class', char.VisibleString()),
    namedtype.NamedType('type', Object_id()),
    namedtype.NamedType('data', univ.SequenceOf(componentType=User_field()))
)


User_field.componentType = namedtype.NamedTypes(
    namedtype.NamedType('label', Object_id()),
    namedtype.OptionalNamedType('num', univ.Integer()),
    namedtype.NamedType('data', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('str', char.VisibleString()),
        namedtype.NamedType('int', univ.Integer()),
        namedtype.NamedType('real', univ.Real()),
        namedtype.NamedType('bool', univ.Boolean()),
        namedtype.NamedType('os', univ.OctetString()),
        namedtype.NamedType('object', User_object()),
        namedtype.NamedType('strs', univ.SequenceOf(componentType=char.VisibleString())),
        namedtype.NamedType('ints', univ.SequenceOf(componentType=univ.Integer())),
        namedtype.NamedType('reals', univ.SequenceOf(componentType=univ.Real())),
        namedtype.NamedType('oss', univ.SequenceOf(componentType=univ.OctetString())),
        namedtype.NamedType('fields', univ.SequenceOf(componentType=User_field())),
        namedtype.NamedType('objects', univ.SequenceOf(componentType=User_object()))
    ))
    )
)

# Auto-generated by asn1ate v.0.6.0 from biblio_20180209.asn

# (last modified on 2018-06-17 20:18:05.536450)


from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class Affil(univ.Choice):
    pass


Affil.componentType = namedtype.NamedTypes(
    namedtype.NamedType('str', char.VisibleString()),
    namedtype.NamedType('std', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.OptionalNamedType('affil', char.VisibleString()),
        namedtype.OptionalNamedType('div', char.VisibleString()),
        namedtype.OptionalNamedType('city', char.VisibleString()),
        namedtype.OptionalNamedType('sub', char.VisibleString()),
        namedtype.OptionalNamedType('country', char.VisibleString()),
        namedtype.OptionalNamedType('street', char.VisibleString()),
        namedtype.OptionalNamedType('email', char.VisibleString()),
        namedtype.OptionalNamedType('fax', char.VisibleString()),
        namedtype.OptionalNamedType('phone', char.VisibleString()),
        namedtype.OptionalNamedType('postal-code', char.VisibleString())
    ))
    )
)


class DOI(char.VisibleString):
    pass


class PII(char.VisibleString):
    pass


class PmPid(char.VisibleString):
    pass


class PmcPid(char.VisibleString):
    pass


class PmcID(univ.Integer):
    pass


class PubMedId(univ.Integer):
    pass


class MedlineUID(univ.Integer):
    pass


class ArticleId(univ.Choice):
    pass


ArticleId.componentType = namedtype.NamedTypes(
    namedtype.NamedType('pubmed', PubMedId()),
    namedtype.NamedType('medline', MedlineUID()),
    namedtype.NamedType('doi', DOI()),
    namedtype.NamedType('pii', PII()),
    namedtype.NamedType('pmcid', PmcID()),
    namedtype.NamedType('pmcpid', PmcPid()),
    namedtype.NamedType('pmpid', PmPid()),
    namedtype.NamedType('other', Dbtag())
)


class ArticleIdSet(univ.SetOf):
    pass


ArticleIdSet.componentType = ArticleId()


class Author(univ.Sequence):
    pass


Author.componentType = namedtype.NamedTypes(
    namedtype.NamedType('name', Person_id()),
    namedtype.OptionalNamedType('level', univ.Enumerated(namedValues=namedval.NamedValues(('primary', 1), ('secondary', 2)))),
    namedtype.OptionalNamedType('role', univ.Enumerated(namedValues=namedval.NamedValues(('compiler', 1), ('editor', 2), ('patent-assignee', 3), ('translator', 4)))),
    namedtype.OptionalNamedType('affil', Affil()),
    namedtype.OptionalNamedType('is-corr', univ.Boolean())
)


class Auth_list(univ.Sequence):
    pass


Auth_list.componentType = namedtype.NamedTypes(
    namedtype.NamedType('names', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('std', univ.SequenceOf(componentType=Author())),
        namedtype.NamedType('ml', univ.SequenceOf(componentType=char.VisibleString())),
        namedtype.NamedType('str', univ.SequenceOf(componentType=char.VisibleString()))
    ))
    ),
    namedtype.OptionalNamedType('affil', Affil())
)


class PubStatus(univ.Integer):
    pass


PubStatus.namedValues = namedval.NamedValues(
    ('received', 1),
    ('accepted', 2),
    ('epublish', 3),
    ('ppublish', 4),
    ('revised', 5),
    ('pmc', 6),
    ('pmcr', 7),
    ('pubmed', 8),
    ('pubmedr', 9),
    ('aheadofprint', 10),
    ('premedline', 11),
    ('medline', 12),
    ('other', 255)
)


class PubStatusDate(univ.Sequence):
    pass


PubStatusDate.componentType = namedtype.NamedTypes(
    namedtype.NamedType('pubstatus', PubStatus()),
    namedtype.NamedType('date', Date())
)


class PubStatusDateSet(univ.SetOf):
    pass


PubStatusDateSet.componentType = PubStatusDate()


class CitRetract(univ.Sequence):
    pass


CitRetract.componentType = namedtype.NamedTypes(
    namedtype.NamedType('type', univ.Enumerated(namedValues=namedval.NamedValues(('retracted', 1), ('notice', 2), ('in-error', 3), ('erratum', 4)))),
    namedtype.OptionalNamedType('exp', char.VisibleString())
)


class Imprint(univ.Sequence):
    pass


Imprint.componentType = namedtype.NamedTypes(
    namedtype.NamedType('date', Date()),
    namedtype.OptionalNamedType('volume', char.VisibleString()),
    namedtype.OptionalNamedType('issue', char.VisibleString()),
    namedtype.OptionalNamedType('pages', char.VisibleString()),
    namedtype.OptionalNamedType('section', char.VisibleString()),
    namedtype.OptionalNamedType('pub', Affil()),
    namedtype.OptionalNamedType('cprt', Date()),
    namedtype.OptionalNamedType('part-sup', char.VisibleString()),
    namedtype.DefaultedNamedType('language', char.VisibleString().subtype(value="ENG")),
    namedtype.OptionalNamedType('prepub', univ.Enumerated(namedValues=namedval.NamedValues(('submitted', 1), ('in-press', 2), ('other', 255)))),
    namedtype.OptionalNamedType('part-supi', char.VisibleString()),
    namedtype.OptionalNamedType('retract', CitRetract()),
    namedtype.OptionalNamedType('pubstatus', PubStatus()),
    namedtype.OptionalNamedType('history', PubStatusDateSet())
)


class Title(univ.SetOf):
    pass


Title.componentType = univ.Choice(componentType=namedtype.NamedTypes(
    namedtype.NamedType('name', char.VisibleString()),
    namedtype.NamedType('tsub', char.VisibleString()),
    namedtype.NamedType('trans', char.VisibleString()),
    namedtype.NamedType('jta', char.VisibleString()),
    namedtype.NamedType('iso-jta', char.VisibleString()),
    namedtype.NamedType('ml-jta', char.VisibleString()),
    namedtype.NamedType('coden', char.VisibleString()),
    namedtype.NamedType('issn', char.VisibleString()),
    namedtype.NamedType('abr', char.VisibleString()),
    namedtype.NamedType('isbn', char.VisibleString())
))


class Cit_book(univ.Sequence):
    pass


Cit_book.componentType = namedtype.NamedTypes(
    namedtype.NamedType('title', Title()),
    namedtype.OptionalNamedType('coll', Title()),
    namedtype.NamedType('authors', Auth_list()),
    namedtype.NamedType('imp', Imprint())
)


class Cit_jour(univ.Sequence):
    pass


Cit_jour.componentType = namedtype.NamedTypes(
    namedtype.NamedType('title', Title()),
    namedtype.NamedType('imp', Imprint())
)


class Meeting(univ.Sequence):
    pass


Meeting.componentType = namedtype.NamedTypes(
    namedtype.NamedType('number', char.VisibleString()),
    namedtype.NamedType('date', Date()),
    namedtype.OptionalNamedType('place', Affil())
)


class Cit_proc(univ.Sequence):
    pass


Cit_proc.componentType = namedtype.NamedTypes(
    namedtype.NamedType('book', Cit_book()),
    namedtype.NamedType('meet', Meeting())
)


class Cit_art(univ.Sequence):
    pass


Cit_art.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('title', Title()),
    namedtype.OptionalNamedType('authors', Auth_list()),
    namedtype.NamedType('from', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('journal', Cit_jour()),
        namedtype.NamedType('book', Cit_book()),
        namedtype.NamedType('proc', Cit_proc())
    ))
    ),
    namedtype.OptionalNamedType('ids', ArticleIdSet())
)


class Cit_gen(univ.Sequence):
    pass


Cit_gen.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('cit', char.VisibleString()),
    namedtype.OptionalNamedType('authors', Auth_list()),
    namedtype.OptionalNamedType('muid', univ.Integer()),
    namedtype.OptionalNamedType('journal', Title()),
    namedtype.OptionalNamedType('volume', char.VisibleString()),
    namedtype.OptionalNamedType('issue', char.VisibleString()),
    namedtype.OptionalNamedType('pages', char.VisibleString()),
    namedtype.OptionalNamedType('date', Date()),
    namedtype.OptionalNamedType('serial-number', univ.Integer()),
    namedtype.OptionalNamedType('title', char.VisibleString()),
    namedtype.OptionalNamedType('pmid', PubMedId())
)


class Cit_let(univ.Sequence):
    pass


Cit_let.componentType = namedtype.NamedTypes(
    namedtype.NamedType('cit', Cit_book()),
    namedtype.OptionalNamedType('man-id', char.VisibleString()),
    namedtype.OptionalNamedType('type', univ.Enumerated(namedValues=namedval.NamedValues(('manuscript', 1), ('letter', 2), ('thesis', 3))))
)


class Patent_priority(univ.Sequence):
    pass


Patent_priority.componentType = namedtype.NamedTypes(
    namedtype.NamedType('country', char.VisibleString()),
    namedtype.NamedType('number', char.VisibleString()),
    namedtype.NamedType('date', Date())
)


class Cit_pat(univ.Sequence):
    pass


Cit_pat.componentType = namedtype.NamedTypes(
    namedtype.NamedType('title', char.VisibleString()),
    namedtype.NamedType('authors', Auth_list()),
    namedtype.NamedType('country', char.VisibleString()),
    namedtype.NamedType('doc-type', char.VisibleString()),
    namedtype.OptionalNamedType('number', char.VisibleString()),
    namedtype.OptionalNamedType('date-issue', Date()),
    namedtype.OptionalNamedType('class', univ.SequenceOf(componentType=char.VisibleString())),
    namedtype.OptionalNamedType('app-number', char.VisibleString()),
    namedtype.OptionalNamedType('app-date', Date()),
    namedtype.OptionalNamedType('applicants', Auth_list()),
    namedtype.OptionalNamedType('assignees', Auth_list()),
    namedtype.OptionalNamedType('priority', univ.SequenceOf(componentType=Patent_priority())),
    namedtype.OptionalNamedType('abstract', char.VisibleString())
)


class Cit_sub(univ.Sequence):
    pass


Cit_sub.componentType = namedtype.NamedTypes(
    namedtype.NamedType('authors', Auth_list()),
    namedtype.OptionalNamedType('imp', Imprint()),
    namedtype.OptionalNamedType('medium', univ.Enumerated(namedValues=namedval.NamedValues(('paper', 1), ('tape', 2), ('floppy', 3), ('email', 4), ('other', 255)))),
    namedtype.OptionalNamedType('date', Date()),
    namedtype.OptionalNamedType('descr', char.VisibleString())
)


class Id_pat(univ.Sequence):
    pass


Id_pat.componentType = namedtype.NamedTypes(
    namedtype.NamedType('country', char.VisibleString()),
    namedtype.NamedType('id', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('number', char.VisibleString()),
        namedtype.NamedType('app-number', char.VisibleString())
    ))
    ),
    namedtype.OptionalNamedType('doc-type', char.VisibleString())
)


# Auto-generated by asn1ate v.0.6.0 from medline_20180209.asn

# (last modified on 2018-06-17 20:18:18.606306)


from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class DocRef(univ.Sequence):
    pass


DocRef.componentType = namedtype.NamedTypes(
    namedtype.NamedType('type', univ.Integer(namedValues=namedval.NamedValues(('medline', 1), ('pubmed', 2), ('ncbigi', 3)))),
    namedtype.NamedType('uid', univ.Integer())
)


class Medline_qual(univ.Sequence):
    pass


Medline_qual.componentType = namedtype.NamedTypes(
    namedtype.DefaultedNamedType('mp', univ.Boolean().subtype(value=0)),
    namedtype.NamedType('subh', char.VisibleString())
)


class Medline_mesh(univ.Sequence):
    pass


Medline_mesh.componentType = namedtype.NamedTypes(
    namedtype.DefaultedNamedType('mp', univ.Boolean().subtype(value=0)),
    namedtype.NamedType('term', char.VisibleString()),
    namedtype.OptionalNamedType('qual', univ.SetOf(componentType=Medline_qual()))
)


class Medline_field(univ.Sequence):
    pass


Medline_field.componentType = namedtype.NamedTypes(
    namedtype.NamedType('type', univ.Integer(namedValues=namedval.NamedValues(('other', 0), ('comment', 1), ('erratum', 2)))),
    namedtype.NamedType('str', char.VisibleString()),
    namedtype.OptionalNamedType('ids', univ.SequenceOf(componentType=DocRef()))
)


class Medline_si(univ.Sequence):
    pass


Medline_si.componentType = namedtype.NamedTypes(
    namedtype.NamedType('type', univ.Enumerated(namedValues=namedval.NamedValues(('ddbj', 1), ('carbbank', 2), ('embl', 3), ('hdb', 4), ('genbank', 5), ('hgml', 6), ('mim', 7), ('msd', 8), ('pdb', 9), ('pir', 10), ('prfseqdb', 11), ('psd', 12), ('swissprot', 13), ('gdb', 14)))),
    namedtype.OptionalNamedType('cit', char.VisibleString())
)


class Medline_rn(univ.Sequence):
    pass


Medline_rn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('type', univ.Enumerated(namedValues=namedval.NamedValues(('nameonly', 0), ('cas', 1), ('ec', 2)))),
    namedtype.OptionalNamedType('cit', char.VisibleString()),
    namedtype.NamedType('name', char.VisibleString())
)


class Medline_entry(univ.Sequence):
    pass


Medline_entry.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('uid', univ.Integer()),
    namedtype.NamedType('em', Date()),
    namedtype.NamedType('cit', Cit_art()),
    namedtype.OptionalNamedType('abstract', char.VisibleString()),
    namedtype.OptionalNamedType('mesh', univ.SetOf(componentType=Medline_mesh())),
    namedtype.OptionalNamedType('substance', univ.SetOf(componentType=Medline_rn())),
    namedtype.OptionalNamedType('xref', univ.SetOf(componentType=Medline_si())),
    namedtype.OptionalNamedType('idnum', univ.SetOf(componentType=char.VisibleString())),
    namedtype.OptionalNamedType('gene', univ.SetOf(componentType=char.VisibleString())),
    namedtype.OptionalNamedType('pmid', PubMedId()),
    namedtype.OptionalNamedType('pub-type', univ.SetOf(componentType=char.VisibleString())),
    namedtype.OptionalNamedType('mlfield', univ.SetOf(componentType=Medline_field())),
    namedtype.DefaultedNamedType('status', univ.Integer(namedValues=namedval.NamedValues(('publisher', 1), ('premedline', 2), ('medline', 3))).subtype(value='medline'))
)


# Auto-generated by asn1ate v.0.6.0 from pubmed_20180209.asn

# (last modified on 2018-06-17 20:18:32.183913)


from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class Pubmed_url(univ.Sequence):
    pass


Pubmed_url.componentType = namedtype.NamedTypes(
    namedtype.OptionalNamedType('location', char.VisibleString()),
    namedtype.NamedType('url', char.VisibleString())
)


class Pubmed_entry(univ.Sequence):
    pass


Pubmed_entry.componentType = namedtype.NamedTypes(
    namedtype.NamedType('pmid', PubMedId()),
    namedtype.OptionalNamedType('medent', Medline_entry()),
    namedtype.OptionalNamedType('publisher', char.VisibleString()),
    namedtype.OptionalNamedType('urls', univ.SetOf(componentType=Pubmed_url())),
    namedtype.OptionalNamedType('pubid', char.VisibleString())
)





